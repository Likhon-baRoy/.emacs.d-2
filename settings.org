#+TITLE: Emacs configuration
#+SUBTITLE: Here’s my Emacs setup that I use on the daily.
#+AUTHOR: Serghei Iakovlev

Emacs has been my text editor of choice since probably about 2017 or so,
and along the way I've become accustomed to many different tweaks for it.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

* Window

Ckonvenient keybindings to resize windows.
For more see: https://www.emacswiki.org/emacs/WindowResize

#+begin_src emacs-lisp
(bind-key "S-C-<left>"  'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<down>"  'shrink-window)
(bind-key "S-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))

(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("C-c t" . transpose-frame))
#+end_src

* Ido

~ido-mode~ enhanced Emacs switch buffer command and opening file command.
For more see: http://ergoemacs.org/emacs/emacs_ido_mode.html

#+begin_src emacs-lisp
(use-package ido
  :disabled t
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("<f10>" . whitespace-mode))
#+end_src

* Eshell

Emacs shell interactive mode.

Usefull links:
- [[https://www.emacswiki.org/emacs/EshellPrompt][EshellPrompt]]
- [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][Eschewing Zshell for Emacs Shell]]

#+begin_src emacs-lisp
(use-package eshell
  :defer t
  :init
  :config
  (add-hook 'eshell-mode-hook
            '(lambda ()
               (define-key eshell-mode-map (kbd "C-a") 'eshell-bol))))
#+end_src

#+begin_src emacs-lisp
(bind-key (kbd "M-s e") 'eshell)
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+begin_src emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+end_src

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-S-s" . ace-jump-mode))
#+end_src

** Winum

[[https://github.com/deb0ch/emacs-winum][Window numbers]] for Emacs: Navigate your windows and frames using numbers !

#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config
  (progn
    (setq winum-auto-assign-0-to-minibuffer nil
          winum-ignored-buffers '(" *which-key*"))

    (define-key winum-keymap (kbd "M-0") 'winum-select-window-0-or-10)
    (define-key winum-keymap (kbd "M-1") 'winum-select-window-1)
    (define-key winum-keymap (kbd "M-2") 'winum-select-window-2)
    (define-key winum-keymap (kbd "M-3") 'winum-select-window-3)
    (define-key winum-keymap (kbd "M-4") 'winum-select-window-4)
    (define-key winum-keymap (kbd "M-5") 'winum-select-window-5)
    (define-key winum-keymap (kbd "M-6") 'winum-select-window-6)
    (define-key winum-keymap (kbd "M-7") 'winum-select-window-7)
    (define-key winum-keymap (kbd "M-8") 'winum-select-window-8)
    (define-key winum-keymap (kbd "M-9") 'winum-select-window-9)

    (winum-mode)

    (set-face-attribute 'winum-face nil :foreground "DeepPink" :weight 'bold)))
#+end_src

** Eldoc/C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

Documentation for elisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

Eldoc displays information about function signatures.
Here we reduce the delay.

#+begin_src emacs-lisp
(setq eldoc-idle-delay 0.3)
#+end_src

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Editorconfig

[[https://editorconfig.org/][Editorconfig]] is a configuration format for controlling the
text attributes for text files.  It is good to use with version
control, especially when contributors develop on different platforms.

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :diminish editorconfig-mode
  :config
  (editorconfig-mode 1))
#+end_src

** Password store

#+begin_src emacs-lisp
(use-package password-store
  :ensure t)
#+end_src
** ERC

#+begin_src emacs-lisp
(use-package erc-hl-nicks
  :ensure t
  :after erc)

(use-package erc-image
  :ensure t
  :after erc)

;; https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/
(use-package erc
  :after password-store
  :defer t
  :custom
  (erc-autojoin-channels-alist
   '(("freenode.net"
      "#emacs" "#i3" "#latex" "#org-mode"
      "#phalcon" "#zephir")))

  (erc-autojoin-timing 'ident)
  (erc-fill-function 'erc-fill-static)
  (erc-fill-static-center 22)
  (erc-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-threshold-time 43200)
  (erc-prompt-for-nickserv-password nil)
  (erc-server-reconnect-attempts 5)
  (erc-server-reconnect-timeout 3)
  (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                             "324" "329" "332" "333" "353" "477"))

  :config
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling)
  (erc-services-mode 1)
  (erc-update-modules))

(defun my/erc-start-or-switch ()
  "Connects to ERC, or switch to last active buffer."
  (interactive)
  (if (get-buffer "irc.freenode.net:6667")
      (erc-track-switch-buffer 1)
    (when (y-or-n-p "Start ERC? ")
      (erc :server "irc.freenode.net" :port 6667 :nick "klay"))))
#+end_src
** Helm

Helm Configuration.

*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: helm-prerequisites
:END:

| Name | ArchLinux | Gentoo        | Ubuntu   | Optional |
|------+-----------+---------------+----------+----------|
| [[https://beyondgrep.com][ack]]  | ack       | sys-apps/ack  | ack-grep | No       |
| [[https://curl.haxx.se][cURL]] | curl      | net-misc/curl | curl     | No       |

*** Packages
:PROPERTIES:
:CUSTOM_ID: helm-packages
:END:

| Package           | Description                                                         |
|-------------------+---------------------------------------------------------------------|
| [[https://github.com/emacs-helm/helm][helm]]              | Emacs incremental completion and selection narrowing framework.     |
| [[https://github.com/emacs-helm/helm-descbinds][helm-descbins]]     | A helm frontend for ~M-x~ ~describe-bindings~.                      |
| [[https://github.com/PythonNut/helm-flx][helm-flx]]          | A [[https://github.com/lewang/flx][flx]]-based fuzzy sorting for helm.                                 |
| [[https://github.com/yasuyk/helm-flycheck][helm-flycheck]]     | Show flycheck errors with helm.                                     |
| [[https://github.com/EphramPerdition/helm-fuzzier][helm-fuzzier]]      | Better Fuzzy Matching for emacs Helm .                              |
| [[https://github.com/istib/helm-mode-manager][helm-mode-manager]] | Switch and toggle emacs major and minor modes using Helm .          |
| [[https://github.com/alphapapa/helm-org-rifle][helm-org-rifle]]    | Rifle through your Org buffers and acquire your target.             |
| [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]]        | Efficiently hopping squeezed lines powered by Emacs helm interface. |
| [[https://github.com/syohex/emacs-helm-ag][helm-ag]]           | The silver searcher with helm interface.                            |

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (require 'helm-config)

  (use-package helm-descbinds
    :ensure t
    :config (helm-descbinds-mode)
    :bind (("C-h b" . helm-descbinds)))

  (use-package helm-flx
    :ensure t
    :defer t
    :init (setq helm-flx-for-helm-locate t)
    :config (helm-flx-mode))

  (use-package helm-flycheck :ensure t)

  (use-package helm-fuzzier
    :ensure t :disabled
    :init (helm-fuzzier-mode))

  (use-package helm-mode-manager :ensure t)

  (use-package helm-org-rifle :ensure t)

  (use-package helm-swoop
    :ensure t
    :bind (("C-c h M-S" . helm-multi-swoop)
           ("C-c h S"   . helm-multi-swoop-projectile)))

  (use-package helm-ag
    :ensure t
    :after ag)

  ;; Global Keybindings
  ;;
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h".
  ;;
  ;; Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key   (kbd "C-c h") 'helm-command-prefix)
  (global-set-key   (kbd "C-x h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  ;; Helm Google Suggest Settings
  ;; Make helm-google-suggest prefer using curl
  (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

  ;; Replace grep with ack-grep
  (when (executable-find "ack-grep")
    (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))

  (setq
   ; open helm buffer inside cur window, don't jump to whole other window
   helm-split-window-in-side-p           t
   ; move to beg/end of source when end/beg is reached
   helm-move-to-line-cycle-in-source     t
   ; scroll 8 lines other window using M-<next>/M-<prior>
   helm-scroll-amount                    8
   helm-ff-file-name-history-use-recentf t
   helm-ff-skip-boring-files             t
   ; search for library in `require' and `declare-function' sexp.
   helm-ff-search-library-in-sexp        t
   helm-echo-input-in-header-line        t
   helm-M-x-fuzzy-match                  t
   helm-apropos-fuzzy-match              t
   helm-buffers-fuzzy-matching           nil
   helm-completion-in-region-fuzzy-match t
   helm-etags-fuzzy-match                t
   helm-ff-fuzzy-matching                t
   helm-file-cache-fuzzy-match           t
   helm-imenu-fuzzy-match                t
   helm-lisp-fuzzy-completion            t
   helm-locate-fuzzy-match               t
   helm-locate-library-fuzzy-match       t
   helm-mode-fuzzy-match                 t
   helm-recentf-fuzzy-match              t
   helm-semantic-fuzzy-match             t
   helm-adaptive-history-file
   (concat user-cache-dir "helm-adaptive-history.el"))

  ;; C-c h i settings
  (setq helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match    t)

  (defun spacemacs//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))

  (add-hook 'helm-minibuffer-set-up-hook
            'spacemacs//helm-hide-minibuffer-maybe)

  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

  ;; Lets see bookmarks in Helm Mini as well.
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-buffer-not-found))

  (helm-adaptive-mode)
  (helm-mode t)
  (ido-mode -1)

  :config
  ;; Write $<FOO>/ in helm-find-files to expand any of the following folder
  ;; shortcuts (just like ~/)
  (setenv "ED"   user-emacs-dir)
  (setenv "EL"   (concat user-emacs-dir "site-lisp"))
  (setenv "ORG"  (expand-file-name "~/Dropbox/Org"))
  (setenv "N"    (expand-file-name "~/Dropbox/Notes"))

  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

  :bind (("C-c h"   . helm-command-prefix)
         ("C-x b"   . helm-mini)
         ("C-h a"   . helm-apropos)
         ("C-`"     . helm-resume)
         ("M-y"     . helm-show-kill-ring)
         ("M-x"     . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x r"   . helm-recentf)
         ("C-x C-i" . helm-semantic-or-imenu)

         :map helm-command-map
         ("C-c h" . helm-execute-persistent-action)

         :map helm-map
         ;; Rebind tab to run persistent action
         ("<tab>" . helm-execute-persistent-action)
         ;; Also rebind <tab> in terminals (i.e., the cryptic "C-i") to do the same
         ("C-i"   . helm-execute-persistent-action)
         ;; List actions using C-z
         ("C-z"   . helm-select-action)))
#+end_src

** Edit With Emacs

Editing input boxes from Chrome/Firefox with Emacs. Pretty useful to keep all
significant text-writing on the web within Emacs.  I typically use this
with posts on GitHub, which has a post editor that overrides normal
Emacs key bindings with other functions.  As such, ~markdown-mode~ is used.

For more see:

- [[https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1][Edit with Emacs Firefox Add-on]]
- [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh][Edit with Emacs Google Chrome Extension]]

When using firefox plugin itsalltext with Emacs, finish editing on Emacs with ~C-x #~
http://psung.blogspot.com.es/2009/05/using-itsalltext-with-emacsemacsclient.html

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t)

  :config
  (add-to-list 'edit-server-url-major-mode-alist '("^stackoverflow" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^github.com" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^emacs\\.stackexchange" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^unix\\.stackexchange" . markdown-mode))

  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Elfeed

#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :ensure t
  :defer t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+end_src

** Flycheckf

=Flycheck= is a general syntax highlighting framework which
other packages hook into.  It's an improvment on the built in =flymake=.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq flycheck-indication-mode 'right-fringe
        flycheck-standard-error-navigation nil
        flycheck-display-errors-function
        #'flycheck-display-error-messages-unless-error-list)

  (add-hook 'after-init-hook 'global-flycheck-mode)
  ;; Start it automatically for all modes except ELisp mode,
  ;; where the linter is just designed to make you mad.
  (add-hook 'find-file-hook
            (lambda ()
              (when (not (equal 'emacs-lisp-mode major-mode))
                (flycheck-mode))))

  :diminish flycheck-mode)
#+end_src

** Flyspell

*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: flyspell-prerequisites
:END:

| Name      | ArchLinux | Gentoo             | Ubuntu    | Optional |
|-----------+-----------+--------------------+-----------+----------|
| [[http://aspell.net/][aspell]]    | aspell    | textproc/aspell    | aspell    | No       |
| aspell-ru | aspell-ru | textproc/aspell-ru | aspell-ru | No       |
| aspell-en | aspell-en | textproc/aspell-en | aspell-en | No       |

*** Packages
:PROPERTIES:
:CUSTOM_ID: flyspell-packages
:END:

| Package       | Description                                        |
|---------------+----------------------------------------------------|
| [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][flyspell]]      | Eenables on-the-fly spell checking in Emacs.       |
| [[https://github.com/pronobis/helm-flyspell][helm-flyspell]] | Helm extension for correcting words with Flyspell. |


#+begin_src emacs-lisp
(use-package flyspell
  :defer t
  :ensure helm-flyspell
  :diminish flyspell-mode " Ⓢ"

  :init
  (dolist (hook '(text-mode-hook org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

  (dolist (hook '(org-agenda-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))

  :config
  (setq ispell-program-name "aspell"
        ;; my dictionary-alist, using for redefinition russian dictionary
        ispell-dictionary-alist
        '(("english"   ;; English
           "[a-zA-Z]"  ;; casecshars
           "[^a-zA-Z]" ;; not-casechars
           "['-’]"     ;; other-chars
           nil
           ("-d" "en" "--lang" "en_GB" "--encoding=en_GB.utf8" "--size=90")
           nil
           utf-8
           ;;iso-8859-1
           )
          ("russian" ;; Russian
           "[АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯабвгдеёжзийклмнопрстуфхцчшщьыъэюя]"
           "[^АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯабвгдеёжзийклмнопрстуфхцчшщьыъэюя]"
           "[`'-]"
           nil
           ("-C" "-d" "ru")
           nil
           utf-8))
        ispell-aspell-dictionary-alist ispell-dictionary-alist

        ispell-russian-dictionary "russian"
        ispell-english-dictionary "english"

        flyspell-default-dictionary ispell-russian-dictionary

        ispell-dictionary ispell-english-dictionary
        ispell-extra-args '("--sug-mode=normal")
        ispell-list-command "--list")

  ; (add-hook 'org-mode-hook #'flyspell-mode)

  :bind
  (:map flyspell-mode-map
        ("C-;" . #'helm-flyspell-correct)))
#+end_src

** Macrostep

Macrostep allows you to see what Elisp macros expand to.
For more see the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("H-`" . macrostep-expand))
#+end_src

** Markdown mode

Install [[https://github.com/commonmark/cmark][cmark]] or your Markdown processor of choice and set it as ~markdown-command~ before using the live previewer commands.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :config
  (setq markdown-command "cmark"))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("C-c d"       . mc/mark-all-dwim)))
#+end_src

** Projectile

Project navigation and management library for Emacs.
For more see: http://batsov.com/projectile/

*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: projectile-prerequisites
:END:

*** Packages
:PROPERTIES:
:CUSTOM_ID: projectile-packages
:END:

| Package         | Description                           |
|-----------------+---------------------------------------|
| [[https://github.com/bbatsov/helm-projectile][helm-projectile]] | Helm UI for Projectile.               |
| [[https://github.com/bbatsov/projectile][projectile]]      | Project Interaction Library for Emacs |

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :init
  (setq projectile-cache-file (concat user-cache-dir "projectile.cache")
        projectile-known-projects-file (concat user-cache-dir "projectile-bookmarks.eld")
        ;; The command-line option ‘-batch’ causes Emacs to run `noninteractively'.
        projectile-enable-caching (not noninteractive)
        ;; The alien indexing method optimizes to the limit the speed
        ;; of the hybrid indexing method.
        projectile-indexing-method 'alien
        ;; Projectile will consider the current directory the project root.
        rojectile-require-project-root nil
        ;; Ignores
        projectile-globally-ignored-files '(".DS_Store" "Icon" "TAGS")
        projectile-globally-ignored-file-suffixes
        '(".elc" ".pyc" ".o" ".lo" ".la" ".out" ".sock"))

  :bind (("C-c p p"   . projectile-switch-project)
         ("C-c p s s" . projectile-ag))
  :config
  (projectile-mode t))
#+end_src

#+begin_src emacs-lisp
(use-package helm-projectile
    :ensure t
    :after helm
    :commands (helm-projectile helm-projectile-switch-project)
    :init
    (setq projectile-completion-system 'helm)
    (helm-projectile-on)
    (setq projectile-switch-project-action 'helm-projectile)

    (defvar helm-source-file-not-found
      (helm-build-dummy-source
          "Create file"
        :action 'find-file))

    (add-to-list 'helm-projectile-sources-list helm-source-file-not-found t))
#+end_src

** Restclient

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs.  The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Smartscan

Quickly jumps between other symbols found at point in Emacs.
For more see: https://github.com/mickeynp/smart-scan

#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1))
#+end_src

** Yasnippet

Yeah, snippets!
For more see [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]] .

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Setting =yas-indent-line= to ='fixed= fixes Python indentation
behavior when typing a templated snippet.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-dir "snippets"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode))
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config

  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode.  This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Shell pop

#+begin_src emacs-lisp
(use-package shell-pop
  :ensure t
  :bind ("M-<f12>" . shell-pop))
#+end_src

** SLIME

The Superior Lisp Interaction Mode for Emacs. First, Install SBCL with
brew.

Note: You have to install =sbcl=.

#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :defer 10
  :init
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (add-to-list 'slime-contribs 'slime-fancy))
#+end_src

** Quickrun

#+begin_src emacs-lisp
(use-package quickrun
  :defer 10
  :ensure t
  :bind ("C-c r" . quickrun))
#+end_src

** Undo Tree

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t)
#+end_src

** crux

A Collection of Ridiculously Useful eXtensions for Emacs.
[[https://github.com/bbatsov/crux][crux]] bundles a few useful interactive commands to enhance your overall Emacs experience.

#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)))
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.ya?ml\\'")
#+end_src

** PHP

Install =php-mode=, set coding style, add a hook to load =flymake=
and configure ac company.

*** ac-php

#+begin_src emacs-lisp
(use-package ac-php
  :ensure t
  :after company)
#+end_src

*** company-php

#+begin_src emacs-lisp
(use-package company-php
  :ensure t
  :after ac-php
  :config
  (unless (executable-find "phpctags")
    (warn "company-php: phpctags isn't installed, auto-completion will be gimped"))
  (let ((my-cache-dir (concat user-cache-dir "ac-php/")))
    (setq ac-php-tags-path my-cache-dir)
    (unless (file-exists-p my-cache-dir)
      (make-directory my-cache-dir t))))
#+end_src

*** php-mode

#+begin_src emacs-lisp
(use-package php-mode
    :ensure t
    :after company-php
    :mode (("\\.php[ts354]?\\'" . php-mode)
           ("\\.inc\\'" . php-mode))
    :requires (ac-php company-php)

    :config
    (defun serg/locate-php-executable ()
      "Search for the PHP executable using ’phpenv’.

This function will try to find the PHP executable by calling ’phpenv’.
If it is not available, the function will utilize `executable-find'.
The function will set `php-executable' to the current PHP if found
or nil otherwise."
      (if-let ((phpenv (executable-find "phpenv")))
          (setq php-executable
                (replace-regexp-in-string
                 "\n\\'" ""
                 (shell-command-to-string (concat phpenv " which php"))))
        (setq php-executable (executable-find "php"))))

    (add-hook 'php-mode-hook 'auto-complete-mode)
    (add-hook 'php-mode-hook 'company-mode)
    (add-hook 'php-mode-hook 'subword-mode)
    (add-hook 'php-mode-hook #'serg/locate-php-executable)

    (ac-php-remake-tags)
    (ac-php-remake-tags-all)
    (ac-php-core-eldoc-setup)
    (make-local-variable 'company-backends)
    (add-to-list 'company-backends 'company-ac-php-backend)
    (setq-default php-mode-coding-style 'psr2)

    :bind
    (:map php-mode-map
          ("<C-tab>" . #'counsel-company)
          ("C-]"     . #'ac-php-find-symbol-at-point)
          ("C-t"     . #'ac-php-location-stack-back)
          ("C-c /"   . #'comment-or-uncomment-region)
          ("C-c C--" . #'php-current-class)
          ("C-c C-=" . #'php-current-namespace)))
#+end_src

** Web mode

[[http://web-mode.org/][web-mode]] is an autonomous emacs major-mode for editing web templates.

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'"      . web-mode)
         ("\\.tpl\\'"        . web-mode)
         ("\\.tpl\\.php\\'"  . web-mode)
         ("\\.phtml\\'"      . web-mode)
         ("\\.volt\\'"       . web-mode)
         ("\\.twig\\'"       . web-mode)
         ("\\.[agj]sp\\'"    . web-mode)
         ("\\.as[cp]x\\'"    . web-mode)
         ("\\.erb\\'"        . web-mode)
         ("\\.mustache\\'"   . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'"        . web-mode)
         ("\\.djhtml\\'"     . web-mode))
  :init
  ;; associate an engine
  (setq web-mode-engines-alist
        '(("php"   . "\\.phtml\\'")
          ("blade" . "\\.blade\\.")))

  ;; indentation
  (setq-default indent-tabs-mode nil)
  (setq web-mode-markup-indent-offset 4
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 4))
#+end_src

** Haskell

Haskell configuration for Emacs.

*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: haskell-prerequisites
:END:

| Name    | ArchLinux | Gentoo                       | Ubuntu  | Optional |
|---------+-----------+------------------------------+---------+----------|
| [[https://github.com/DanielG/ghc-mod][ghc-mod]] | ghc-mod   | app-emacs/ghc-mod            | ghc-mod | No       |
| [[https://github.com/ndmitchell/hlint][hlint]]   | hlint     | dev-haskell/hlint            | hlint   | No       |
| [[https://github.com/ndmitchell/hoogle][hoogle]]  | hoogle    | dev-haskell/hoogle [haskell] | hoogle  | No       |

*** Packages
:PROPERTIES:
:CUSTOM_ID: haskell-packages
:END:

| Package          | Description                                                        |
|------------------+--------------------------------------------------------------------|
| [[https://github.com/haskell/haskell-mode][haskell-mode]]     | Emacs mode for editing, debugging and developing Haskell programs. |
| [[https://github.com/DanielG/ghc-mod][ghc-mod]]          | Haskell completion and keybindings.                                |
| [[https://github.com/flycheck/flycheck-haskell][flycheck-haskell]] | Flycheck mode for Haskell.                                         |


#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :mode "\\.l?hs\\'"
  :init
  (progn
    (setq
     haskell-interactive-popup-errors nil
     haskell-process-log t
     haskell-process-suggest-remove-import-lines t
     haskell-process-auto-import-loaded-modules t
     haskell-stylish-on-save t)

    (use-package company-ghci
      :ensure t
      :defer t)

    (use-package flycheck-haskell
      :ensure t
      :after flycheck
      :init (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))

    (use-package intero
      :defer t
      :ensure t
      :init
      (progn
        (setq intero-extra-ghci-options '("-fno-defer-type-errors"))))

    (use-package hindent
      :ensure t
      :commands (hindent-mode)
      :bind (:map hindent-mode-map
                  ("C-c R" . hindent-reformat-buffer)))

    (defun haskell-hook ()
      (semantic-mode)
      (flycheck-mode)
      (intero-global-mode)
      (hindent-mode)
      (add-to-list (make-local-variable 'company-backends)
                   '(company-intero company-ghci company-dabbrev-code company-yasnippet)))

    (add-hook 'haskell-mode-hook 'haskell-hook)))
#+end_src
** Windows scripts

*** PowerShell

#+begin_src emacs-lisp
(use-package powershell
  :ensure t
  :mode "\\.ps[dm]?1\\'")
#+end_src

* Languages

** C/Java

Change the default way that Emacs handles indentation. For instance,

#+begin_src C
int main(int argc, char *argv[])
{
  /* What's with the brace alignment? */
  if (check)
    {
    }
  return 0;
}
#+end_src

and

#+begin_src java
switch (number)
    {
    case 1:
        doStuff();
        break;
    case 2:
        doStuff();
        break;
    default:
        break;
    }
#+end_src

Luckily, I can modify the way Emacs formats code with this configuration.

#+begin_src emacs-lisp
(defun my/c-mode-hook ()
  (setq tab-width 4)
  (setq c-basic-offset 4)
  (setq indent-tabs-mode t)

  (c-set-offset 'substatement-open 0)   ; Curly braces alignment
  (c-set-offset 'case-label 4))         ; Switch case statements alignment

(add-hook 'c-mode-hook 'my/c-mode-hook)
(add-hook 'java-mode-hook 'my/c-mode-hook)
#+end_src

* Misc

** Post initialization

*** Measure time to init

#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)
                 (message "Used features: %d" (length features))))
            t))

#+end_src
** Custom function

Revert buffer without confirmation.

#+begin_src emacs-lisp
;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
(defun serg/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+end_src
