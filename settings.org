#+TITLE: Emacs configuration
#+SUBTITLE: Here’s my Emacs setup that I use on the daily.
#+AUTHOR: Serghei Iakovlev

* ELPA packages

** Eldoc/C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

Documentation for elisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

Eldoc displays information about function signatures.
Here we reduce the delay.

#+begin_src emacs-lisp
(setq eldoc-idle-delay 0.3)
#+end_src

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Password store

#+begin_src emacs-lisp
(use-package password-store
  :ensure t)
#+end_src
** ERC

#+begin_src emacs-lisp
(use-package erc-hl-nicks
  :ensure t
  :after erc)

(use-package erc-image
  :ensure t
  :after erc)

;; https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/
(use-package erc
  :after password-store
  :defer t
  :custom
  (erc-autojoin-channels-alist
   '(("freenode.net"
      "#emacs" "#i3" "#latex" "#org-mode"
      "#phalcon" "#zephir")))

  (erc-autojoin-timing 'ident)
  (erc-fill-function 'erc-fill-static)
  (erc-fill-static-center 22)
  (erc-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-threshold-time 43200)
  (erc-prompt-for-nickserv-password nil)
  (erc-server-reconnect-attempts 5)
  (erc-server-reconnect-timeout 3)
  (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                             "324" "329" "332" "333" "353" "477"))

  :config
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling)
  (erc-services-mode 1)
  (erc-update-modules))

(defun my/erc-start-or-switch ()
  "Connects to ERC, or switch to last active buffer."
  (interactive)
  (if (get-buffer "irc.freenode.net:6667")
      (erc-track-switch-buffer 1)
    (when (y-or-n-p "Start ERC? ")
      (erc :server "irc.freenode.net" :port 6667 :nick "klay"))))
#+end_src
** Flycheckf

=Flycheck= is a general syntax highlighting framework which
other packages hook into.  It's an improvment on the built in =flymake=.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq flycheck-indication-mode 'right-fringe
        flycheck-standard-error-navigation nil
        flycheck-display-errors-function
        #'flycheck-display-error-messages-unless-error-list)

  (add-hook 'after-init-hook 'global-flycheck-mode)
  ;; Start it automatically for all modes except ELisp mode,
  ;; where the linter is just designed to make you mad.
  (add-hook 'find-file-hook
            (lambda ()
              (when (not (equal 'emacs-lisp-mode major-mode))
                (flycheck-mode))))

  :diminish flycheck-mode)
#+end_src

** Markdown mode

Install [[https://github.com/commonmark/cmark][cmark]] or your Markdown processor of choice and set it as ~markdown-command~ before using the live previewer commands.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :config
  (setq markdown-command "cmark"))
#+end_src

** Yasnippet

Yeah, snippets!
For more see [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]] .

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Setting =yas-indent-line= to ='fixed= fixes Python indentation
behavior when typing a templated snippet.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-dir "snippets"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode))
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config

  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode))
#+end_src

** SLIME

The Superior Lisp Interaction Mode for Emacs. First, Install SBCL with
brew.

Note: You have to install =sbcl=.

#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :defer 10
  :init
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (add-to-list 'slime-contribs 'slime-fancy))
#+end_src

** crux

A Collection of Ridiculously Useful eXtensions for Emacs.
[[https://github.com/bbatsov/crux][crux]] bundles a few useful interactive commands to enhance your overall Emacs experience.

#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)))
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.ya?ml\\'")
#+end_src

** Web mode

[[http://web-mode.org/][web-mode]] is an autonomous emacs major-mode for editing web templates.

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'"      . web-mode)
         ("\\.tpl\\'"        . web-mode)
         ("\\.tpl\\.php\\'"  . web-mode)
         ("\\.phtml\\'"      . web-mode)
         ("\\.volt\\'"       . web-mode)
         ("\\.twig\\'"       . web-mode)
         ("\\.[agj]sp\\'"    . web-mode)
         ("\\.as[cp]x\\'"    . web-mode)
         ("\\.erb\\'"        . web-mode)
         ("\\.mustache\\'"   . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'"        . web-mode)
         ("\\.djhtml\\'"     . web-mode))
  :init
  ;; associate an engine
  (setq web-mode-engines-alist
        '(("php"   . "\\.phtml\\'")
          ("blade" . "\\.blade\\.")))

  ;; indentation
  (setq-default indent-tabs-mode nil)
  (setq web-mode-markup-indent-offset 4
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 4))
#+end_src

** Windows scripts

*** PowerShell

#+begin_src emacs-lisp
(use-package powershell
  :ensure t
  :mode "\\.ps[dm]?1\\'")
#+end_src

* Misc

** Post initialization

*** Measure time to init

#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)
                 (message "Used features: %d" (length features))))
            t))

#+end_src
