#+TITLE: Emacs configuration
#+SUBTITLE: Here’s my Emacs setup that I use on the daily.
#+AUTHOR: Serghei Iakovlev
#+EMAIL: sadhooklay@gmail.com

Emacs has been my text editor of choice since probably about 2017 or so,
and along the way I've become accustomed to many different tweaks for it.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

* Header

This is to remind me in case I start editing [[file:settings.el][settings.el]] by mistake...

#+BEGIN_SRC emacs-lisp
;;; settings.el -- Common configuration file.  -*- lexical-binding: t -*-
;;
;; ------------------ DO NOT EDIT THIS FILE BY HAND -------------------- ;;
;;
;;    This code generated by `org-babel-load-file' from settings.org.
;;
;; ------------------ DO NOT EDIT THIS FILE BY HAND -------------------- ;;
#+END_SRC

* Personal information

#+begin_src emacs lisp
(setq user-full-name "Serghei Iakovlev"
      user-mail-address "sadhooklay@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Theme

** Doom theme

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+end_src

* Font

[[https://github.com/tonsky/FiraCode][Fira Code]] is a nice monospaced font.

#+begin_src sh :tangle no
# You may need to run these two lines if you haven't set up Homebrew
# Cask and its fonts formula.
brew install caskroom/cask/brew-cask
brew tap caskroom/fonts

brew cask install font-fira-code
#+end_src

To install it on Ubuntu, install the package ~fonts-firacode~.

#+begin_src sh
sudo apt install fonts-firacode
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             (cond
              ((string-equal system-type "darwin")    '(font . "Fira Code-14"))
              ((string-equal system-type "gnu/linux") '(font . "Fira Code-12"))))
#+end_src

Note: To view all fonts that are available to use, run the following:

#+begin_src emacs-lisp :tangle no
(font-family-list)
#+end_src

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

** Setting up occur

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

** Pretify page breaks

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t)
#+end_src

** Miscellaneous stuff

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Automagic indent on newline
(global-set-key "\C-m" 'newline-and-indent)

;; Auto reread from disk when file changes
(global-auto-revert-mode t)

;; Enable line highlight mode everywhere
(global-hl-line-mode 1)

;; Make sure that there is one newline at the end of the file while saving,
;; also removes all spaces at the end of lines.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq-default indicate-empty-lines t)

;; Change all yes-or-no-p to y-or-n-p
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Modeline tweaks

Activate column and line number in the modeline, as well as time.

#+begin_src emacs-lisp
(column-number-mode t)
(line-number-mode t)
(display-time-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)
#+end_src

** Backup behaviour

*** Delete excess backup versions silently

#+begin_src emacs-lisp
(setq delete-old-versions t)
#+end_src

*** Use Version control

#+begin_src emacs-lisp
(setq version-control t)
#+end_src

*** Make backup files even in version controlled directories

#+begin_src emacs-lisp
(setq vc-make-backup-files t)
#+end_src

*** Backup directories

#+begin_src emacs-lisp
;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Use utf-8 by default

#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+end_src

** Configuring bell

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)

;; Don't beep at me
(setq visible-bell t)
#+end_src

** Don't ask for confirmation when opening symlinks

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

** Default text wrap at 80 cols

#+begin_src emacs-lisp
(setq default-fill-column 80)
#+end_src

** Startup message customization

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message
      (concat
       ";; This buffer is for text that is not saved, and for Lisp evaluation.\n"
       ";; To create a file, visit it with \\[find-file] and enter text in its buffer.\n"
       ";; To evaluate an S-expr in this buffer, use \\[eval-print-last-sexp].\n"
       ";;\n"
       ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n"))
#+end_src

** Remove the trailing whitespaces on save

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Open URLs with =xdg-open=

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-xdg-open)
#+end_src

** Save hist

Setting up a file for the history, and also raise the history size.

#+begin_src emacs-lisp
(savehist-mode 1)
(setq savehist-file
  (expand-file-name "history" user-emacs-directory) history-length 300)
#+end_src

** Utilities for =list-packages= menu

Add functions to filter the list by status (s new), or filter to see only
marked packages.

#+begin_src emacs-lisp
(defun package-menu-find-marks ()
  "Find packages marked for action in *Packages*."
  (interactive)
  (occur "^[A-Z]"))

(defun package-menu-filter-by-status (status)
  "Filter the *Packages* buffer by status."
  (interactive
   (list (completing-read
          "Status : " '("new" "installed" "dependency" "obsolete"))))
  (package-menu-filter (concat "status:" status)))

(define-key package-menu-mode-map "s" #'package-menu-filter-by-status)
(define-key package-menu-mode-map "a" #'package-menu-find-marks)
#+end_src

** Eldoc

Eldoc displays information about function signatures.
Here we reduce the delay.

#+begin_src emacs-lisp
(setq eldoc-idle-delay 0.3)
#+end_src

** Documentation for elisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

* List buffers

=ibuffer= is the improved version of =list-buffers=.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer)
#+end_src

source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

Save the list of recently accessed files.

#+begin_src emacs-lisp
(use-package recentf
  :config
  (recentf-mode t)
  (setq recentf-max-saved-items 500))
#+end_src

* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features. :sm

It goes without saying that I also use it to manage my Emacs config.

** Installation

Although Org mode ships with Emacs, the latest version can be installed externally. The configuration here follows the [[http://orgmode.org/elpa.html][Org mode ELPA installation instructions]].

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib)
#+end_src

On Org mode version 9 I wasn't able to execute source blocks out of the box. [[https://emacs.stackexchange.com/a/28604][Others have ran into the same issue too]]. The solution is to remove the =*.elc= files from the package directory:

#+begin_src sh :var ORG_DIR=(let* ((org-v (cadr (split-string (org-version nil t) "@"))) (len (length org-v))) (substring org-v 1 (- len 2)))
rm ${ORG_DIR}/*.elc
#+end_src

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
(setq org-capture-bookmark nil)
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-image-actual-width 550)
(setq org-highlight-latex-and-related '(latex script entities))
#+end_src

** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp
(use-package ob-restclient
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (lisp . t)
   (scheme . t)
   (shell . t)
   (sqlite . t)
   (js . t)
   (haskell . t)
   (php . t)
   (restclient . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

** Org templates

Source block templates.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("md" . "src markdown"))
(add-to-list 'org-structure-template-alist '("php" . "src php"))
#+end_src

** Org exporting

*** Pandoc exporter

Pandoc converts between a huge number of different file formats.

#+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t
  :defer 10
  :ensure t)
#+end_src

*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter for PDF exporting. By changing the command to `latexmk` references appear in the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+begin_src emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+end_src

* Tramp

#+begin_src emacs-lisp :trangle no
(use-package tramp)
#+end_src

* Window

Ckonvenient keybindings to resize windows.
For more see: https://www.emacswiki.org/emacs/WindowResize

#+begin_src emacs-lisp
(bind-key "S-C-<left>"  'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<down>"  'shrink-window)
(bind-key "S-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))

(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("C-c t" . transpose-frame))
#+end_src

* Ido

#+begin_src emacs-lisp
(use-package ido
  :disabled t
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("<f10>" . whitespace-mode))
#+end_src

* Keybindings

** Revert buffer

#+begin_src emacs-lisp
(bind-key "C-c u" #'revert-buffer)
#+end_src

** =ibuffer=

#+begin_src emacs-lisp
(bind-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Ag

#+begin_src emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+end_src

** Ace Jump Mode

A quick way to jump around text in buffers.

[[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :diminish ace-jump-mode
  :commands ace-jump-mode
  :bind ("C-S-s" . ace-jump-mode))
#+end_src

** Winum

[[https://github.com/deb0ch/emacs-winum][Window numbers]] for Emacs: Navigate your windows and frames using numbers !

#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config
  (progn
    (setq winum-auto-assign-0-to-minibuffer nil
          winum-ignored-buffers '(" *which-key*"))

    (define-key winum-keymap (kbd "M-0") 'winum-select-window-0-or-10)
    (define-key winum-keymap (kbd "M-1") 'winum-select-window-1)
    (define-key winum-keymap (kbd "M-2") 'winum-select-window-2)
    (define-key winum-keymap (kbd "M-3") 'winum-select-window-3)
    (define-key winum-keymap (kbd "M-4") 'winum-select-window-4)
    (define-key winum-keymap (kbd "M-5") 'winum-select-window-5)
    (define-key winum-keymap (kbd "M-6") 'winum-select-window-6)
    (define-key winum-keymap (kbd "M-7") 'winum-select-window-7)
    (define-key winum-keymap (kbd "M-8") 'winum-select-window-8)
    (define-key winum-keymap (kbd "M-9") 'winum-select-window-9)

    (winum-mode)

    (set-face-attribute 'winum-face nil :foreground "DeepPink" :weight 'bold)))
#+end_src

** Eldoc/C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Helm

For more see: https://github.com/emacs-helm/helm/wiki/Locate

#+begin_src emacs-lisp
(use-package helm
  :disabled t
  :ensure t
  :diminish helm-mode
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x C-r" . helm-recentf))
  :init
  (require 'helm-config)
  :config
  (setq helm-locate-command "locate %s -e -A --regex %s"
        helm-ff-newfile-prompt-p nil
        helm-M-x-fuzzy-match t)
  (helm-mode))

(use-package helm-projectile
  :ensure t
  :after helm-mode
  :commands helm-projectile
  :bind ("C-c p h" . helm-projectile))

(use-package helm-ag
  :ensure t
  :after helm-mode)

(use-package helm-swoop
  :ensure t
  :after helm-mode
  :bind ("H-w" . helm-swoop))
#+end_src

** Ivy

#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map
   ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)

  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)

  ;; number of result lines to display
  (setq ivy-height 10)

  ;; Show candidate index and total count
  (setq ivy-count-format "(%d/%d) ")

  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)

  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-r" . counsel-recentf)
         ("C-c h i" . counsel-imenu)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function)))

(use-package counsel-projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (counsel-projectile-mode)
  (setq counsel-projectile-switch-project-action 'dired))

(use-package swiper
  :ensure t
  :bind (("C-c s" . swiper)))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit. For more see: https://magit.vc/

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind (("C-c g" . magit-status)
         ("C-c m l" . magit-log-buffer-file)
         ("C-c m b" . magit-blame))
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src


*** Fullscreen magit

#+begin_quote
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+end_quote

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Edit With Emacs

Editing input boxes from Chrome with Emacs. Pretty useful to keep all
significant text-writing on the web within emacs. I typically use this
with posts on Discourse, which has a post editor that overrides normal
Emacs key bindings with other functions. As such, ~markdown-mode~ is
used.

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Elfeed

#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :ensure t
  :defer t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+end_src

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer 10
  :config (setq flycheck-html-tidy-executable "tidy5"))
#+end_src

** Git Link

#+begin_src emacs-lisp
(use-package git-link
  :ensure t)
#+end_src

** Macrostep

Macrostep allows you to see what Elisp macros expand to.
For more see the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("H-`" . macrostep-expand))
#+end_src

** Markdown mode

Install [[https://github.com/commonmark/cmark][cmark]] or your Markdown processor of choice and set it as ~markdown-command~ before using the live previewer commands.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :config
  (setq markdown-command "cmark"))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("C-c d"       . mc/mark-all-dwim)))
#+end_src

** Projectile

Project navigation and management library for Emacs.
For more see: http://batsov.com/projectile/

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :bind (("C-c p p" . projectile-switch-project)
         ("C-c p s s" . projectile-ag))
  :config
  (setq projectile-keymap-prefix "p")
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired))
#+end_src

** Restclient

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Smartscan

Quickly jumps between other symbols found at point in Emacs.
For more see: https://github.com/mickeynp/smart-scan

#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1))
#+end_src

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode))
#+end_src

** Yasnippet

Yeah, snippets!
For more see [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]] .

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Setting =yas-indent-line= to ='fixed= fixes Python indentation
behavior when typing a templated snippet.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode))
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config

  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode))
#+end_src

** Scratch

Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode.  This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t
  :commands scratch)
#+end_src

** Shell pop

#+begin_src emacs-lisp
(use-package shell-pop
  :ensure t
  :bind ("M-<f12>" . shell-pop))
#+end_src

** SLIME

The Superior Lisp Interaction Mode for Emacs. First, Install SBCL with
brew.

Note: You have to install =sbcl=.

#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :defer 10
  :init
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (add-to-list 'slime-contribs 'slime-fancy))
#+end_src

** Quickrun

#+begin_src emacs-lisp
(use-package quickrun
  :defer 10
  :ensure t
  :bind ("C-c r" . quickrun))
#+end_src

** Undo Tree

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t)
#+end_src

** Treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)
        ("C-`"       . treemacs-switch-workspace)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src

** =crux=

A Collection of Ridiculously Useful eXtensions for Emacs.
[[https://github.com/bbatsov/crux][crux]] bundles a few useful interactive commands to enhance your overall Emacs experience.

#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)))
#+end_src

** =json=mode=

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

** =yaml-mode=

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t)
#+end_src

** =company-mode=

Auto completion.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config

  (setq company-tooltip-limit 20)
  (setq company-idle-delay .15)
  (setq company-echo-delay 0)
  (setq company-begin-commands '(self-insert-command))

  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+end_src

** PHP

Install =php-mode=, set coding style and add a hook to load =flymake=.

*** php-mode

#+begin_src emacs-lisp
(use-package php-mode
    :ensure t
    :mode (("\\.php[ts354]?\\'" . php-mode)
           ("\\.inc\\'" . php-mode))
    :config
    (progn
      (setq php-executable "/usr/bin/php")
      (setq-default php-mode-coding-style 'psr2)

      (add-hook 'php-mode-hook (lambda () (subword-mode 1)))

      (define-key php-mode-map (kbd "C-c C--") 'php-current-class)
      (define-key php-mode-map (kbd "C-c C-=") 'php-current-namespace)
      (define-key php-mode-map (kbd "C-c /") 'comment-or-uncomment-region)))
#+end_src

*** company-php

#+begin_src emacs-lisp
(use-package company-php
  :ensure t
  :init
    (add-hook 'php-mode-hook
          '(lambda ()
             (require 'company-php)
             (company-mode t)
             ;; Enable eldoc
             (ac-php-core-eldoc-setup)
             (make-local-variable 'company-backends)
             (add-to-list 'company-backends 'company-ac-php-backend))))
#+end_src

** Web mode

[[http://web-mode.org/][web-mode]] is an autonomous emacs major-mode for editing web templates.

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'" . web-mode)
         ("\\.tpl\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.phtml\\'" . web-mode)
         ("\\.volt\\'" . web-mode)
         ("\\.twig\\'" . web-mode)
         ("\\.[agj]sp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode))
  :init
  ;; associate an engine
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade" . "\\.blade\\.")))

  ;; indentation
  (setq-default indent-tabs-mode nil)
  (setq web-mode-markup-indent-offset 4
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 4))
#+end_src

** Haskell
-
#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :mode "\\.hs"
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)

  (custom-set-variables
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-log t))

  :bind
  (:map
   haskell-mode-map
   ("<backtab>" . haskell-indentation-indent-backwards)
     ("TAB"     . haskell-indentation-indent-line)

     ("M-."     . haskell-mode-goto-loc)
     ("C-c C-t" . haskell-mode-show-type-at)

     ("M-P"     . flymake-goto-prev-error)
     ("M-N"     . flymake-goto-next-error)

     ("C-,"     . haskell-move-nested-left)
     ("C-."     . haskell-move-nested-right)

     ("C-`"     . haskell-interactive-bring)
     ("C-c C-k" . haskell-interactive-mode-clear)

     ("C-c C-c" . haskell-compile)
     ("C-c C-d" . haskell-w3m-open-haddock)
     ("C-c C-f" . haskell-cabal-visit-file)

     ("C-c C-b" . haskell-process-cabal-build)
     ("C-c C-l" . haskell-process-load-or-reload)
     ("C-c C-i" . haskell-process-do-info)
     ("C-c c"   . haskell-process-cabal)))
#+end_src
* Computer-specific settings

Load some computer-specific settings, such as the name and and email
address. The way the settings are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar
Sveen's]] config.

In my case, the computers I use usually use the same username (my
name, go figure), so instead of basing the specific settings from the
username, I use the hostname. The shell command ~hostname -s~ gets the
hostname for the computer without any "domain information," such as
the ".local" suffix.

#+begin_src emacs-lisp
(require 'subr-x) ;; #'string-trim
(defvar mai/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(setq mai/user-settings-dir
      (concat user-emacs-directory
              "users/"
              (string-trim (shell-command-to-string "hostname -s"))))
(add-to-list 'load-path mai/user-settings-dir)

;; Load settings specific for the current user
(when (file-exists-p mai/user-settings-dir)
  (mapc 'load (directory-files mai/user-settings-dir nil "^[^#].*el$")))
#+end_src

* Languages

** C/Java

Change the default way that Emacs handles indentation. For instance,

#+begin_src C
int main(int argc, char *argv[])
{
  /* What's with the brace alignment? */
  if (check)
    {
    }
  return 0;
}
#+end_src

and

#+begin_src java
switch (number)
    {
    case 1:
        doStuff();
        break;
    case 2:
        doStuff();
        break;
    default:
        break;
    }
#+end_src

Luckily, I can modify the way Emacs formats code with this configuration.

#+begin_src emacs-lisp
(defun my-c-mode-hook ()
  (setq tab-width 4)
  (setq c-basic-offset 4)
  (setq indent-tabs-mode t)

  (c-set-offset 'substatement-open 0)   ; Curly braces alignment
  (c-set-offset 'case-label 4))         ; Switch case statements alignment

(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'java-mode-hook 'my-c-mode-hook)
#+end_src

* Misc

** Non-ELPA packages

Some packages aren't in ELPA, so they're stored in the [[file:site-lisp][site-lisp]]
directory and loaded here.

** Edit with Emacs

Edit content in web forms via "Edit with Emacs" Firefox/Chrome plugin
For more see:

- [[https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1][Edit with Emacs Firefox Add-on]]
- [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh][Edit with Emacs Google Chrome Extension]]

When using firefox plugin itsalltext with Emacs, finish editing on Emacs with ~C-x #~
http://psung.blogspot.com.es/2009/05/using-itsalltext-with-emacsemacsclient.html

#+begin_src emacs-lisp
(use-package edit-server
  :unless window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t)

  :config
  (add-to-list 'edit-server-url-major-mode-alist '("^stackoverflow" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^github.com" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^emacs\\.stackexchange" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^unix\\.stackexchange" . markdown-mode)))
#+end_src

** Post initialization

*** Measure time to init

#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)))
            t))

#+end_src
