#+TITLE: Emacs configuration
#+SUBTITLE: Here’s my Emacs setup that I use on the daily.
#+AUTHOR: Serghei Iakovlev

* Window

Ckonvenient keybindings to resize windows.
For more see: https://www.emacswiki.org/emacs/WindowResize

#+begin_src emacs-lisp
(bind-key "S-C-<left>"  'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<down>"  'shrink-window)
(bind-key "S-C-<up>"    'enlarge-window)
#+end_src

Whenever I split windows, I usually do so and also switch to the other
window as well, so might as well rebind the splitting key bindings to
do just that to reduce the repetition.

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))

(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(use-package winner
  :config
  (winner-mode t)
  :bind (("M-s-<left>" . winner-undo)
         ("M-s-<right>" . winner-redo)))
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("C-c t" . transpose-frame))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("<f10>" . whitespace-mode))
#+end_src

* Eshell

Emacs shell interactive mode.

Usefull links:
- [[https://www.emacswiki.org/emacs/EshellPrompt][EshellPrompt]]
- [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][Eschewing Zshell for Emacs Shell]]

#+begin_src emacs-lisp
(use-package eshell
  :defer t
  :init
  :config
  (add-hook 'eshell-mode-hook
            '(lambda ()
               (define-key eshell-mode-map (kbd "C-a") 'eshell-bol))))
#+end_src

#+begin_src emacs-lisp
(bind-key (kbd "M-s e") 'eshell)
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Winum

[[https://github.com/deb0ch/emacs-winum][Window numbers]] for Emacs: Navigate your windows and frames using numbers !

#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config
  (progn
    (setq winum-auto-assign-0-to-minibuffer nil
          winum-ignored-buffers '(" *which-key*"))

    (define-key winum-keymap (kbd "M-0") 'winum-select-window-0-or-10)
    (define-key winum-keymap (kbd "M-1") 'winum-select-window-1)
    (define-key winum-keymap (kbd "M-2") 'winum-select-window-2)
    (define-key winum-keymap (kbd "M-3") 'winum-select-window-3)
    (define-key winum-keymap (kbd "M-4") 'winum-select-window-4)
    (define-key winum-keymap (kbd "M-5") 'winum-select-window-5)
    (define-key winum-keymap (kbd "M-6") 'winum-select-window-6)
    (define-key winum-keymap (kbd "M-7") 'winum-select-window-7)
    (define-key winum-keymap (kbd "M-8") 'winum-select-window-8)
    (define-key winum-keymap (kbd "M-9") 'winum-select-window-9)

    (winum-mode)

    (set-face-attribute 'winum-face nil :foreground "DeepPink" :weight 'bold)))
#+end_src

** Eldoc/C-Eldoc
   :PROPERTIES:
   :GitHub:   https://github.com/mooz/c-eldoc
   :END:

Documentation for elisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

Eldoc displays information about function signatures.
Here we reduce the delay.

#+begin_src emacs-lisp
(setq eldoc-idle-delay 0.3)
#+end_src

This package displays function signatures in the mode line.

#+begin_src emacs-lisp
(use-package c-eldoc
  :commands c-turn-on-eldoc-mode
  :ensure t
  :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
#+end_src

** Editorconfig

[[https://editorconfig.org/][Editorconfig]] is a configuration format for controlling the
text attributes for text files.  It is good to use with version
control, especially when contributors develop on different platforms.

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :diminish editorconfig-mode
  :config
  (editorconfig-mode 1))
#+end_src

** Password store

#+begin_src emacs-lisp
(use-package password-store
  :ensure t)
#+end_src
** ERC

#+begin_src emacs-lisp
(use-package erc-hl-nicks
  :ensure t
  :after erc)

(use-package erc-image
  :ensure t
  :after erc)

;; https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/
(use-package erc
  :after password-store
  :defer t
  :custom
  (erc-autojoin-channels-alist
   '(("freenode.net"
      "#emacs" "#i3" "#latex" "#org-mode"
      "#phalcon" "#zephir")))

  (erc-autojoin-timing 'ident)
  (erc-fill-function 'erc-fill-static)
  (erc-fill-static-center 22)
  (erc-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-threshold-time 43200)
  (erc-prompt-for-nickserv-password nil)
  (erc-server-reconnect-attempts 5)
  (erc-server-reconnect-timeout 3)
  (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                             "324" "329" "332" "333" "353" "477"))

  :config
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling)
  (erc-services-mode 1)
  (erc-update-modules))

(defun my/erc-start-or-switch ()
  "Connects to ERC, or switch to last active buffer."
  (interactive)
  (if (get-buffer "irc.freenode.net:6667")
      (erc-track-switch-buffer 1)
    (when (y-or-n-p "Start ERC? ")
      (erc :server "irc.freenode.net" :port 6667 :nick "klay"))))
#+end_src
** Edit With Emacs

Editing input boxes from Chrome/Firefox with Emacs. Pretty useful to keep all
significant text-writing on the web within Emacs.  I typically use this
with posts on GitHub, which has a post editor that overrides normal
Emacs key bindings with other functions.  As such, ~markdown-mode~ is used.

For more see:

- [[https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1][Edit with Emacs Firefox Add-on]]
- [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh][Edit with Emacs Google Chrome Extension]]

When using firefox plugin itsalltext with Emacs, finish editing on Emacs with ~C-x #~
http://psung.blogspot.com.es/2009/05/using-itsalltext-with-emacsemacsclient.html

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t)

  :config
  (add-to-list 'edit-server-url-major-mode-alist '("^stackoverflow" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^github.com" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^emacs\\.stackexchange" . markdown-mode))
  (add-to-list 'edit-server-url-major-mode-alist '("^unix\\.stackexchange" . markdown-mode))

  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Flycheckf

=Flycheck= is a general syntax highlighting framework which
other packages hook into.  It's an improvment on the built in =flymake=.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq flycheck-indication-mode 'right-fringe
        flycheck-standard-error-navigation nil
        flycheck-display-errors-function
        #'flycheck-display-error-messages-unless-error-list)

  (add-hook 'after-init-hook 'global-flycheck-mode)
  ;; Start it automatically for all modes except ELisp mode,
  ;; where the linter is just designed to make you mad.
  (add-hook 'find-file-hook
            (lambda ()
              (when (not (equal 'emacs-lisp-mode major-mode))
                (flycheck-mode))))

  :diminish flycheck-mode)
#+end_src

** Markdown mode

Install [[https://github.com/commonmark/cmark][cmark]] or your Markdown processor of choice and set it as ~markdown-command~ before using the live previewer commands.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :config
  (setq markdown-command "cmark"))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("C-c d"       . mc/mark-all-dwim)))
#+end_src

** Smartscan

Quickly jumps between other symbols found at point in Emacs.
For more see: https://github.com/mickeynp/smart-scan

#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1))
#+end_src

** Yasnippet

Yeah, snippets!
For more see [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]] .

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Setting =yas-indent-line= to ='fixed= fixes Python indentation
behavior when typing a templated snippet.

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-dir "snippets"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode))
#+end_src

** Emmet

According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config

  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode))
#+end_src

** SLIME

The Superior Lisp Interaction Mode for Emacs. First, Install SBCL with
brew.

Note: You have to install =sbcl=.

#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :defer 10
  :init
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (add-to-list 'slime-contribs 'slime-fancy))
#+end_src

** Undo Tree

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t)
#+end_src

** crux

A Collection of Ridiculously Useful eXtensions for Emacs.
[[https://github.com/bbatsov/crux][crux]] bundles a few useful interactive commands to enhance your overall Emacs experience.

#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-c o o" . crux-open-with)
         ("C-c o u" . crux-view-url)))
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
#+end_src

** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.ya?ml\\'")
#+end_src

** Web mode

[[http://web-mode.org/][web-mode]] is an autonomous emacs major-mode for editing web templates.

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'"      . web-mode)
         ("\\.tpl\\'"        . web-mode)
         ("\\.tpl\\.php\\'"  . web-mode)
         ("\\.phtml\\'"      . web-mode)
         ("\\.volt\\'"       . web-mode)
         ("\\.twig\\'"       . web-mode)
         ("\\.[agj]sp\\'"    . web-mode)
         ("\\.as[cp]x\\'"    . web-mode)
         ("\\.erb\\'"        . web-mode)
         ("\\.mustache\\'"   . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'"        . web-mode)
         ("\\.djhtml\\'"     . web-mode))
  :init
  ;; associate an engine
  (setq web-mode-engines-alist
        '(("php"   . "\\.phtml\\'")
          ("blade" . "\\.blade\\.")))

  ;; indentation
  (setq-default indent-tabs-mode nil)
  (setq web-mode-markup-indent-offset 4
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 4))
#+end_src

** Windows scripts

*** PowerShell

#+begin_src emacs-lisp
(use-package powershell
  :ensure t
  :mode "\\.ps[dm]?1\\'")
#+end_src

* Misc

** Post initialization

*** Measure time to init

#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)
                 (message "Used features: %d" (length features))))
            t))

#+end_src
** Custom function

Revert buffer without confirmation.

#+begin_src emacs-lisp
;; Source: http://www.emacswiki.org/emacs-en/download/misc-cmds.el
(defun serg/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+end_src
