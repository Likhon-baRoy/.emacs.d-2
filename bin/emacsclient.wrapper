#! /usr/bin/perl -w
#
# emacsclient.wrapper - Emacs terminal wrapper script
#
# Copyright (c) 2020 Serghei Iakovlev
#
# Usage:
#
# 1. Copy this wrapper to a common path:
#
#     cp emacsclient.wrapper /usr/local/bin
#
# 2. Install it with ``update-alternatives --install'':
#
#     update-alternatives --install /usr/bin/editor editor \
#             /usr/local/bin/emacsclient.wrapper 20
#
# 3. Configure editor to be this wrapper:
#
#     update-alternatives --set editor \
#             /usr/local/bin/emacsclient.wrapper
#
# To run GNU Emacs in server mode see:
# https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html

use strict;

# Emacs arguments.
my @args;

# Will be just `emacs' if there is a SSH session openned.
my $program = 'emacsclient';

# Editor to fallback to if the server is not running.
# If empty, start Emacs in daemon mode and try connecting again.
my $alt = $ENV{'ALTERNATE_EDITOR'} || '';

# Do not use emacsclient on SSH sessions.
if (defined $ENV{'SSH_CONNECTION'}) {
  $program = 'emacs';
}

# Parse argumens.
while (my $opt = shift(@ARGV)) {
    # Remove possible duplicates for emacsclient.
    if (grep(/^-(?:nw|(?:t|-tty))$/, $opt) && $program ne 'emacs') {
	next;
    }

    # Allow ``-a EDITOR'' only in client-server mode.
    if ($opt eq '-a') {
	my $arg = shift(@ARGV);
	if ($program eq 'emacsclient') {
	    $alt = $arg;
	}

	next;
    } elsif (grep(/^--alternate-editor=(.*)$/, $opt)) {
	$opt =~ /^--alternate-editor=(.*)$/;
	if ($program eq 'emacsclient') {
	    $alt = $1;
	}
    } else {
	unshift(@args, $opt);
    }
}

if ($program ne 'emacs') {
    # Open a new Emacs frame on the current terminal.
    unshift(@args, '--tty');

    # Use alternate editor only if there is no SSH session.
    unshift(@args, "--alternate-editor='$alt'");
}

exec($program, @args);
